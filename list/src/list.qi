\*

List functions
==============
Fernando Raya <fernandoraya@gmail.com>

Lists functions for Qi footnote:[http://www.lambdaassociates.com] 
programming language.

.Licence
* LGPL (see http://www.gnu.org/licenses/lgpl.html)

.Requires
* Nothing

.Exports

* <<drop>>
* <<drop-while>>
* <<exist>>
* <<filter>> 
* <<foldl>>
* <<foldr>>
* <<for-all>>
* <<list-init>>
* <<random-element>>
* <<range>> 
* <<range-step>>
* <<take>> 
* <<take-while>>
* <<zip>> 
* <<zip-with>>

*\
\*

[[do-times]]
do-times
-----

Examples:
[source,lisp]
----------------------------------
(1+) (do-times 3 (/. X (print X)))
[1 2 3] : (list number) 
----------------------------------

*\

(define do-times
  {number --> (number --> A) --> [A]}
  N F -> (do-times* 0 N F []))

(define do-times*
  {number --> number --> (number --> A) --> [A] --> [A]}
  M M F R -> (reverse R)
  N M F R -> (do-times* (+ N 1) M F [(F (+ N 1))|R]))

\*

[[drop]]
drop
----

Drop the first _N_ elements of a list _L_ and returns the rest.

.Example
[source,lisp]
-----------------------------
(1+) (drop 3 [1 2 3 4 5 6 7])
[4 5 6 7] : (list number)

(2+) (drop 5 [1 2])
[] : (list number)
-----------------------------
 
*\

(define drop
  {number --> [A] --> [A]}
  _ [] -> []
  N L  -> L where (< N 1)
  N [X|Y] -> (drop (- N 1) Y))

\*

[[drop-while]]
drop-while
----------

Drop elements of a list _L_ while the predicate _P_ is _true_ or
the list _L_ is empty.

.Example
[source,lisp]
------------------------------------------------
(1+) (drop-while (/. X (> X 3)) [7 6 5 4 3 2 1])
[3 2 1] : (list number)
------------------------------------------------

*\

(define drop-while 
  {(A --> boolean) --> [A] --> [A]}
  P [] -> []
  P [X|Y] -> (drop-while P Y) where (P X)
  P L -> L)

\*

[[exists]]
exists
------

Returns _true_ if the predicate _P_ is _true_ for at least 
one element of _L_, _false_ otherwise.

.Example
[source,lisp]
-------------------------------------
(1+) (exists (/. X (= X 3)) [2 4 6])
false : boolean

(2+) (exists (/. X (= X 6)) [2 5 6])
true : boolean
-------------------------------------

*\

(define exists
  {(A --> boolean) --> [A] --> boolean}
  P []    -> false
  P [X|Y] -> true where (P X)
  P [X|Y] -> (exists P Y))

\*

[[for-all]]
for-all
-------

Returns _true_ if predicate _P_ is true for all elements of _L_,
_false_ otherwise.

.Example
[source, lisp]
-------------------------------------------------------------
(1+) (for-all (/. N (>= (* N N) N)) [-3 -2 -1 0 1 3 5 7]) ;; <1>
true : boolean

(2+) (for-all odd? [1 3 4 7])
false: boolean
-------------------------------------------------------------

<1> ∀ n ∈ N: n^2 ≥ n.

*\

(define for-all
  {(A --> boolean) --> [A] --> boolean}
  P []    -> true
  P [X|Y] -> false where (not (P X))
  P [X|Y] -> (for-all P Y))

\*

[[foldl]]
foldl
-----

Iterate a function over a list and return a value. See example for
difference between _foldl_ and _foldr_.

.Example
[source,lisp]
----------------------------------------------------------------------
(1+) (foldl + 0 [1 2 3])
6 : number

(2+) (foldl (/. X Y (make-string "(f ~A ~A)" X Y)) "0" [1 2 3 4 5])
"(f (f (f (f (f 0 1) 2) 3) 4) 5)" : string
----------------------------------------------------------------------

*\

(define foldl
  {(A --> B --> A) --> A --> [B] --> A}
  F Acc []     -> Acc
  F Acc [X|Xs] -> (foldl F (F Acc X) Xs))

\*

[[foldr]]
foldr
-----

Iterate a function over a list returning a value. See example for
difference between _foldl_ and _foldr_.

.Example
[source,lisp]
------------------------
(1+) (foldr * [1 2 3] 1)
6 : number
------------------------

.Example
[source,lisp]
-----------------------------------------------------------------------
(2+) (foldr (/. X Y (make-string "(f ~A ~A)" X Y)) [1 2 3 4 5] "0")
"(f 1 (f 2 (f 3 (f 4 (f 5 0)))))" : string
-----------------------------------------------------------------------

*\

(define foldr
  {(A --> B --> B) --> [A] --> B --> B}
  F [] Acc -> Acc
  F [X|Xs] Acc -> (F X (foldr F Xs Acc)))

\*

[[init]]
list-init
---------

Creates a list with _N_ elements of type _A_ created by a function _F_,
where _F_ is _(number --> A)_.

.Example
-----------------------------
(1+) (init 5 (* I 3)))
[3 6 9 12 15] : (list number)
(2+) (init 3 (/. I (+ I 2)))
[3 4 5] : (list number)
(3+)
-----------------------------

*\

(define init
  {number --> (number --> A) --> [A]}
  N F -> (init-help N F []))

(define init-help
  {number --> (number --> A) --> [A] --> [A]}
  0 F R -> R
  N F R -> (init-help (- N 1) F [(F N)|R]))

\*

[[take]]
take
----

Takes n elements from a list.

.Example
[source,lisp]
-----------------------------
(1+) (take 3 [1 2 3 4 5])
[1 2 3] : (list number)
-----------------------------

*\

(define take
  {number --> [A] --> [A]}
  N L -> (reverse (take-help N L [])))

(define take-help
  {number --> [A] --> [A] --> [A]}
  N L Acc -> Acc where (< N 1)
  N [X|Xs] Acc -> (take-help (- N 1) Xs [X|Acc]))

\*

[[filter]]
filter
------

Take the elements of a list that satisfies a predicate function.

.Example
[source,lisp]
--------------------------------
(1+) (filter odd? [1 2 3 4])
[1 3] : (list number)
--------------------------------

*\

(define filter
  {(A --> boolean) --> [A] --> [A]}
  F L -> (foldr (/. X M (if (F X) [X|M] M)) L []))

\*

[[random-element]]
random-element
--------------

Return an element from a list at random.

.Example
[source,lisp]
-----------------------------------
(1+) (random-element [1 2 3 4])
3 : number
-----------------------------------

*\

(define random-element
  {[A] --> A}
  L -> (nth (+ (random (length L)) 1) L))

\*

[[range]]
range
-----

Return a list containing an arithmetic progression.

.Example
[source,lisp]
-----------------------------------
(1+) (range 1 10)
[1 2 3 4 5 6 7 8 9 10] : (list number)
(2+) (range 5 3)
[3 4 5] : (list number)
-----------------------------------
 
*\ 

(define range
  {number --> number --> [number]}
  From To -> (range To From) where (> From To)
  From To -> (range-step-help From To 1 []))

\*

[[range-step]]
range-step
----------

Return a list containing an arithmetic progression with a specific step.

.Example
[source,lisp]
-----------------------------------
(1+) (range-step 1 10 1)
[1 2 3 4 5 6 7 8 9 10] : (list number)
(2+) (range-step 1 10 2)
[1 3 5 7 9] : (list number)
(3+) (range-step 2 10 2)
[2 4 6 8 10] : (list number)
(4+) (range-step 5 3 1)
[3 4 5] : (list number)
(5+) (range-step 4 20 2)
[4 6 8 10 12 14 16 18 20] : (list number)
(6+) (range-step 6 20 3)
[6 9 12 15 18] : (list number)
-----------------------------------
*\
 
(define range-step
  {number --> number --> number --> [number]}
  From To Step -> (range-step-help To From Step []) where (> From To)
  From To Step -> (range-step-help From To Step []))

(define range-step-help
  {number -->  number --> number --> [number] --> [number]}
  From To Step Result -> (reverse Result)     where (> From To)
  From To Step Result -> (reverse [From|Result]) where (= From To)
  From To Step Result -> (range-step-help (+ From Step) To Step [From|Result]))

\*

[[take-while]]
take-while
----------

Takes a predicate _P_ and a list _L_, and returns the longest (possibly
empty) list with the elements that satisfies _P_.

.Example
[source,lisp]
----------------------------------------------
(1+) (take-while (/. X (< X 5)) [1 2 3 4 5 6])
[1 2 3 4] : (list number)

(2+) (take-while (/. X (> X 3)) [4 5 2 6 7])
[4 5] : (list number)
----------------------------------------------

*\

(define take-while
  {(A --> boolean) --> [A] --> [A]}
  P L -> (reverse (take-while-help P L [])))

(define take-while-help
  {(A --> boolean) --> [A] --> [A] --> [A]}
  P []     Acc -> Acc
  P [X|Xs] Acc -> (take-while-help P Xs [X|Acc]) where (P X)
  P [X|Xs] Acc -> Acc)


\*

[[zip]]
zip
---

Compress two list in one list.
Each element of the new list is a tuple with an element from the 
first list and the other from the second. 

.Example
[source,lisp]
-----------------------------------------------------------
(1+) (zip [1 3 5] [2 4 6])
[(@p 1 2) (@p 3 4) (@p 5 6)] : (list (number * number))
-----------------------------------------------------------

*\

(define zip
  {[A] --> [B] --> [(A * B)]}
  X Y -> (reverse (zip-help X Y [])))

(define zip-help
  {[A] --> [B] --> [(A * B)] --> [(A * B)]}
  [] _ R -> R
  _ [] R -> R
  [X|Xs] [Y|Ys] R -> (zip-help Xs Ys [(@p X Y) | R]))

\*

[[zip-with]]
zip-with
--------

Compress two list in one list with the transformation of 
function F.  The functions stops if one of the lists is empty.

.Example
[source,lisp]
-------------------------------------
(1+) (zip-with + [1 3 5] [2 4 6])
[3 7 11] : (list number)

(2+) (zip-with + [1 3 5] [2])
[3] : (list number)
-------------------------------------

*\

(define zip-with
  {(A --> B --> C) --> [A] --> [B] --> [C]}
  F X Y -> (zip-with-help F X Y []))

(define zip-with-help
  {(A --> B --> C) --> [A] --> [B] --> [C] --> [C]}
  F [] _ Acc -> (reverse Acc)
  F _ [] Acc -> (reverse Acc)
  F [X|Xs] [Y|Ys] Acc -> (zip-with-help F Xs Ys [(F X Y)|Acc]))

\*

References
----------
[bibliography]
- [[[fpq]]] Mark Tarver. 'Functional Programming in Qi'. Second Edition. 2008.
Free University Press. ISBN 978184426549-7.
- [[[hsoe]]] Paul Hudak. 'Haskell School of Expression'. Cambridge 
University Press. ISBN 978-0-521-64408-2.
- [[[obi]]] 'Ocaml Batteries Included'. List reference. 
http://thelema.github.com/batteries-included/hdoc/BatList.html.
- [[[oca]]] 'Ocaml Standard Library'. List reference. 
http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html
- Wikipedia. 'Universal quantification'. 
http://en.wikipedia.org/wiki/Universal_quantification
- Wikipedia. 'Fold (higher-order function)'.
'http://en.wikipedia.org/wiki/Fold_(higher-order_function)'

*\